diff --git a/shot_calculation.py b/shot_calculation.py
index 45b5176..9b7614c 100644
--- a/shot_calculation.py
+++ b/shot_calculation.py
@@ -101,8 +101,8 @@ pockets = [[100,300],[500,300],[900,300],[900,700],[500,700],[100,700]]
 
 
 #A list of X and Y coordinates for each ball
-listX = [500,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850]
-listY = [500,310,330,350,370,390,410,430,450,470,490,510,530,550,570,590]
+listX = [500,120,500,880,880,500,850,850,850,850,850,850,850,850,850,850]
+listY = [500,320,320,320,680,430,680,490,520,550,580,610,640,670,680,690]
 
 
 
@@ -311,7 +311,7 @@ def create_second_lines():
 #brief: Draws the image that is going to be projected onto the pool table
 def drawImage():
     img = np.zeros((1000,1000,3), np.uint8)
-    cv.rectangle (img,(100,300),(900,700),GREEN,1)
+    cv.rectangle (img,(TABLE_X_LO,TABLE_Y_LO),(TABLE_X_HI,TABLE_Y_HI),GREEN,1)
     for target_ball in range(NUMBER_OF_BALLS):
         if listX[target_ball]>0:
             if (target_ball==CUE_BALL):
@@ -345,10 +345,8 @@ def find_edges():
         if(listX[target_ball]<0 or listY[target_ball]<0): continue
         shot_params=ball_to_shots.get(target_ball)
         if(math.isnan(shot_params[FIRST_SLOPE])):
-            shot_max[POCKETX] = np.nan
-            shot_max[POCKETY] = np.nan
-            shot_min[POCKETX] = np.nan
-            shot_min[POCKETY] = np.nan
+            x_bound = [np.nan,np.nan]
+            y_bound = [np.nan,np.nan]
             continue
         elif(math.isinf(shot_params[FIRST_SLOPE])): 
             tangent_slope = 0
